// <copyright file="NatSet.intersect.g.cs">Copyright ©  2015</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using System.Collections.Generic;

namespace NatSet
{
    public partial class NatSet
    {
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void intersectThrowsContractException819()
{
    try
    {
      this.intersect((global::NatSet.NatSet)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
public void intersect862()
{
    List<int> list;
    global::NatSet.NatSet natSet;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    bool[] bs = new bool[100];
    bs[99] = true;
    natSet = NatSetFactory.Create(bs, list, 99);
    this.intersect(natSet);
}
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
public void intersect437()
{
    List<int> list;
    global::NatSet.NatSet natSet;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    bool[] bs = new bool[100];
    bs[0] = true;
    bs[99] = true;
    natSet = NatSetFactory.Create(bs, list, 99);
    this.intersect(natSet);
}
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
public void intersect387()
{
    List<int> list;
    global::NatSet.NatSet natSet;
    int[] ints = new int[2];
    ints[0] = 1022;
    ints[1] = 1023;
    list = new List<int>((IEnumerable<int>)ints);
    bool[] bs = new bool[100];
    natSet = NatSetFactory.Create(bs, list, 1023);
    this.intersect(natSet);
}
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
public void intersect209()
{
    List<int> list;
    global::NatSet.NatSet natSet;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    bool[] bs = new bool[100];
    natSet = NatSetFactory.Create(bs, list, -1);
    this.intersect(natSet);
}
[TestMethod]
[PexGeneratedBy(typeof(global::NatSet.NatSet))]
public void intersect189()
{
    List<int> list;
    global::NatSet.NatSet natSet;
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    bool[] bs = new bool[100];
    bs[98] = true;
    natSet = NatSetFactory.Create(bs, list, 98);
    this.intersect(natSet);
}
    }
}
