<documents created="2015-02-28 16:51:27Z"><document src="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics.Contracts;
using Microsoft.Pex.Framework.Validation;
using Microsoft.Pex.Framework;

namespace NatSet
{
    [PexClass]
    public partial class NatSet
    {
        private Boolean[] sm;
        private List<int> rest;
        private int max;

        [ContractInvariantMethod]
        private void invariant()
        ]]></source>
</chunk>
<method name="$InvariantMethod$" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="600004c" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="13" total="13" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="userortestcode"><source><![CDATA[Contract.Invariant(this.sm != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="002b" domain="userortestcode"><source><![CDATA[Contract.Invariant(Contract.ForAll(rest, x => x > 99));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0067" domain="userortestcode"><source><![CDATA[Contract.Invariant(isListSorted(rest));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="007f" domain="userortestcode"><source><![CDATA[Contract.Invariant(this.max == findMax(sm, rest));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public NatSet()
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
        }

        public NatSet(int k)
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
            insert(k);
        }

        [PexMethod]
        public void insert(int k)
        {
            Contract.Requires(k >= 0);

            if (k < 100)
            {
                sm[k] = true;
            }
            else
            {
                if (rest.Contains(k)) return;

                rest.Add(k);
                rest.Sort();
            }

            if (k > max) max = k;

        }


        //Test if exception works correctly
        //Reset max
        [PexMethod]
        [PexAllowedException(typeof(ElementNotFoundException))]
        public void remove(int k)
        ]]></source>
</chunk>
<chunk hits="2" offset="0047" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="remove" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="6000004" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="2"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="2"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="65" value="1"/>
<hit index="66" value="1"/>
<hit index="67" value="1"/>
<hit index="68" value="1"/>
<hit index="69" value="1"/>
<hit index="70" value="2"/>
<hit index="71" value="1"/>
<hit index="72" value="1"/>
<hit index="77" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="15" total="26" coveredRatio="0.57692307692307687"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[Contract.Requires(k >= 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00db" domain="userortestcode"><source><![CDATA[Contract.Ensures(!sm[k] && !rest.Contains(k));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0048" domain="userortestcode"><source><![CDATA[if (k < 100)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0057" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0058" domain="userortestcode"><source><![CDATA[if (sm[k])]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[throw new ElementNotFoundException();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="0070" domain="userortestcode"><source><![CDATA[sm[k] = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0079" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="1" offset="007f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0080" domain="userortestcode"><source><![CDATA[if (!rest.Contains(k))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0093" domain="userortestcode"><source><![CDATA[throw new ElementNotFoundException();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="0" offset="0099" domain="userortestcode"><source><![CDATA[rest.Remove(k);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00a6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="3" offset="00a7" domain="userortestcode"><source><![CDATA[max = findMax(sm, rest);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="00bf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public void union(NatSet other)
        {

        }

        public void intersect(NatSet other)
        {

        }


        [Pure]
        [PexMethod]
        private Boolean isListSorted(List<int> lst)
        ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="isListSorted" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="6000007" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="12" coveredRatio="0.33333333333333331"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[Contract.Requires(lst != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0014" domain="userortestcode"><source><![CDATA[if (lst.Count() <= 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0024" domain="userortestcode"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="0" offset="002b" domain="userortestcode"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="005b" domain="userortestcode"><source><![CDATA[i < lst.Count() - 1]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0057" domain="userortestcode"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0033" domain="userortestcode"><source><![CDATA[if (lst.ElementAt(i) > lst.ElementAt(i + 1))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="userortestcode"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        [Pure]
        [PexMethod]
        private int findMax(bool[] array, List<int> lst)
        ]]></source>
</chunk>
<chunk hits="2" offset="0026" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="findMax" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="6000008" module="NatSet.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="4"/>
<hit index="16" value="2"/>
<hit index="17" value="200"/>
<hit index="18" value="200"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="200"/>
<hit index="23" value="200"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="12" coveredRatio="0.66666666666666663"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[Contract.Requires(array != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="userortestcode"><source><![CDATA[Contract.Requires(lst != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            
            ]]></source>
</chunk>
<chunk hits="2" offset="0027" domain="userortestcode"><source><![CDATA[if (lst.Capacity != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[return lst.ElementAt(lst.Capacity - 1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            for (]]></source>
</chunk>
<chunk hits="2" offset="004b" domain="userortestcode"><source><![CDATA[int i = array.Length - 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="202" offset="0070" domain="userortestcode"><source><![CDATA[i >= 0]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="200" offset="006c" domain="userortestcode"><source><![CDATA[i--]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="200" offset="0056" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="200" offset="0057" domain="userortestcode"><source><![CDATA[if (array[i])]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[return i;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="200" offset="006b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="007b" domain="userortestcode"><source><![CDATA[return -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0082" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }

    public class ElementNotFoundException : System.ApplicationException
    {
        ]]></source>
</chunk>
<method name=".ctor" namespace="NatSet" type="NatSet.ElementNotFoundException" typeName="ElementNotFoundException" token="600004d" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public ElementNotFoundException()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        public ElementNotFoundException(string message) { }
        public ElementNotFoundException(string message, System.Exception inner) { }

        // Constructor needed for serialization 
        // when exception propagates from a remoting server to the client.
        protected ElementNotFoundException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) { }
    }
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of NatSet)" missing="true"><method name="Requires" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000054" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="Ensures" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000055" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="Invariant" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000053" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="ReportFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000051" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="TriggerFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000052" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException" token="600005b" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
</document>
</documents>
