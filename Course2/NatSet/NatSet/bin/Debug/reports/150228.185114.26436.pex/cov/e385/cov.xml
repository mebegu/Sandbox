<documents created="2015-02-28 16:51:26Z"><document src="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics.Contracts;
using Microsoft.Pex.Framework.Validation;
using Microsoft.Pex.Framework;

namespace NatSet
{
    [PexClass]
    public partial class NatSet
    {
        private Boolean[] sm;
        private List<int> rest;
        private int max;

        [ContractInvariantMethod]
        private void invariant()
        {
            Contract.Invariant(this.sm != null);
            Contract.Invariant(Contract.ForAll(rest, x => x > 99));
            Contract.Invariant(isListSorted(rest));
            Contract.Invariant(this.max == findMax(sm, rest));
        }

        public NatSet()
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
        }

        public NatSet(int k)
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
            insert(k);
        }

        [PexMethod]
        public void insert(int k)
        {
            Contract.Requires(k >= 0);

            if (k < 100)
            {
                sm[k] = true;
            }
            else
            {
                if (rest.Contains(k)) return;

                rest.Add(k);
                rest.Sort();
            }

            if (k > max) max = k;

        }


        //Test if exception works correctly
        //Reset max
        [PexMethod]
        [PexAllowedException(typeof(ElementNotFoundException))]
        public void remove(int k)
        {
            Contract.Requires(k >= 0);
            Contract.Ensures(!sm[k] && !rest.Contains(k));

            if (k < 100)
            {
                if (sm[k]) throw new ElementNotFoundException();

                sm[k] = false;
            }
            else
            {
                if (!rest.Contains(k)) throw new ElementNotFoundException();

                rest.Remove(k);
            }

            max = findMax(sm, rest);
        }

        public void union(NatSet other)
        {

        }

        public void intersect(NatSet other)
        {

        }


        [Pure]
        [PexMethod]
        private Boolean isListSorted(List<int> lst)
        ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="isListSorted" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="6000007" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="1"/>
<hit index="11" value="3"/>
<hit index="12" value="3"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="12" total="12" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[Contract.Requires(lst != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0014" domain="userortestcode"><source><![CDATA[if (lst.Count() <= 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0024" domain="userortestcode"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="1" offset="002b" domain="userortestcode"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="005b" domain="userortestcode"><source><![CDATA[i < lst.Count() - 1]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="2" offset="0032" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0033" domain="userortestcode"><source><![CDATA[if (lst.ElementAt(i) > lst.ElementAt(i + 1))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="004f" domain="userortestcode"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="006a" domain="userortestcode"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        [Pure]
        [PexMethod]
        private int findMax(bool[] array, List<int> lst)
        {
            Contract.Requires(array != null);
            Contract.Requires(lst != null);
            
            
            if (lst.Capacity != 0) return lst.ElementAt(lst.Capacity - 1);

            for (int i = array.Length - 1; i >= 0; i--)
            {
                if (array[i]) return i;
            }

            return -1;
        }
    }

    public class ElementNotFoundException : System.ApplicationException
    {
        public ElementNotFoundException() { }
        public ElementNotFoundException(string message) { }
        public ElementNotFoundException(string message, System.Exception inner) { }

        // Constructor needed for serialization 
        // when exception propagates from a remoting server to the client.
        protected ElementNotFoundException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) { }
    }
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of NatSet)" missing="true"><method name="Requires" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000054" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="ReportFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000051" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="TriggerFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="6000052" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException" token="600005b" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
</document>
</documents>
