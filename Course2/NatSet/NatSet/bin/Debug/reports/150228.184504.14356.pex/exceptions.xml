<frameTree version="0.94.51006.1"><frameException type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException"><tag exceptionState="unexpected"><generatedTestRef idref="85281517-2e99-4f52-8861-5c657bc6f8e0"/>
</tag>
<frameNode><frame value="  at NatSet.findMax(Boolean[], List`1&lt;Int32&gt;) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(120)" method="NatSet.findMax(Boolean[], List`1&lt;Int32&gt;)" offset="0" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="120"><method assemblyName="NatSet" name="findMax" token="6000008"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="array" position="1"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="20000a0" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="lst" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        [PexMethod]
        private int findMax(bool[] array, List<int> lst)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(array != null);]]></source>
<afterSource><![CDATA[            Contract.Requires(lst != null);
            
            ]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="85281517-2e99-4f52-8861-5c657bc6f8e0"/>
</tag>
</frameNode>
<frameNode><frame value="  at NatSet.findMax(Boolean[], List`1&lt;Int32&gt;) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(121)" method="NatSet.findMax(Boolean[], List`1&lt;Int32&gt;)" offset="19" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="121"><method assemblyName="NatSet" name="findMax" token="6000008"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="array" position="1"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="20000a0" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="lst" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        private int findMax(bool[] array, List<int> lst)
        {
            Contract.Requires(array != null);]]></beforeSource>
<source><![CDATA[            Contract.Requires(lst != null);]]></source>
<afterSource><![CDATA[            
            
            if (lst.Capacity != 0) return lst.ElementAt(lst.Capacity - 1);]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="9344c5ef-88db-4812-8c74-d8d7171be492"/>
</tag>
</frameNode>
<frameNode><frame value="  at NatSet.insert(Int32) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(45)" method="NatSet.insert(Int32)" offset="0" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="45"><method assemblyName="NatSet" name="insert" token="6000003"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        [PexMethod]
        public void insert(int k)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(k >= 0);]]></source>
<afterSource><![CDATA[

            if (k < 100)]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="5c2342c3-0cdd-4d4c-ae9d-890835c3b76e"/>
</tag>
</frameNode>
</frameException>
<frameException type="System.ArgumentOutOfRangeException"><tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
</tag>
<frameNode><frame value="  at ThrowHelper.ThrowArgumentOutOfRangeException()" method="ThrowHelper.ThrowArgumentOutOfRangeException()" offset="24"><method assemblyName="mscorlib" name="ThrowArgumentOutOfRangeException" static="true" token="6000250"><declaringType assemblyName="mscorlib" name="ThrowHelper" token="2000040" namespace="System"/>
</method>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
<generatedTestRef idref="7d9d7c9d-443d-450c-aa16-aedb80ccfca3"/>
</tag>
<frameNode><frame value="  at List`1.get_Item(Int32)" method="List`1.get_Item(Int32)" offset="9"><method assemblyName="mscorlib" name="get_Item" token="600224c"><declaringType assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
<resultType spec="GenericTypeParameter" index="0"/>
</method>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
<generatedTestRef idref="7d9d7c9d-443d-450c-aa16-aedb80ccfca3"/>
</tag>
<frameNode><frame value="  at Enumerable.ElementAt(IEnumerable`1&lt;!!0&gt;, Int32)" method="Enumerable.ElementAt(IEnumerable`1&lt;!!0&gt;, Int32)" offset="24"><method assemblyName="System.Core" name="ElementAt" static="true" token="6000449"><declaringType assemblyName="System.Core" name="Enumerable" token="200004b" namespace="System.Linq"/>
<genericParameter value="TSource"/>
<parameter name="source" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="IEnumerable`1" token="2000037" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="GenericMethodParameter" index="0"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
<resultType spec="GenericMethodParameter" index="0"/>
</method>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
<generatedTestRef idref="7d9d7c9d-443d-450c-aa16-aedb80ccfca3"/>
</tag>
<frameNode><frame value="  at NatSet.isListSorted(List`1&lt;Int32&gt;) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(110)" method="NatSet.isListSorted(List`1&lt;Int32&gt;)" offset="46" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="110"><method assemblyName="NatSet" name="isListSorted" token="6000007"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="lst" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="20000a0" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            if (lst.Capacity <= 1) return true;
            for (int i = 0; i < lst.Capacity - 1; i++)
            {]]></beforeSource>
<source><![CDATA[                if (lst.ElementAt(i) > lst.ElementAt(i + 1)) return false;]]></source>
<afterSource><![CDATA[            }

            return true;]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
<generatedTestRef idref="7d9d7c9d-443d-450c-aa16-aedb80ccfca3"/>
</tag>
<frameNode><frame value="  at NatSet.$InvariantMethod$() in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(23)" method="NatSet.$InvariantMethod$()" offset="110" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="23"><method assemblyName="NatSet" name="$InvariantMethod$" token="6000027"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            Contract.Invariant(this.sm != null);
            Contract.Invariant(Contract.ForAll(rest, x => x > 99));]]></beforeSource>
<source><![CDATA[            Contract.Invariant(isListSorted(rest));]]></source>
<afterSource><![CDATA[            Contract.Invariant(this.max == findMax(sm, rest));
        }
]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="adb829e7-2d15-448b-a251-7dae541ee997"/>
<generatedTestRef idref="7d9d7c9d-443d-450c-aa16-aedb80ccfca3"/>
</tag>
</frameNode>
</frameNode>
</frameNode>
</frameNode>
</frameNode>
</frameException>
<frameException type="NatSet.ElementNotFoundException"><tag exceptionState="expected"><generatedTestRef idref="63c8bab8-86cb-45ce-8bf7-cb1b755aba49"/>
</tag>
<frameNode><frame value="  at NatSet.remove(Int32) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(83)" method="NatSet.remove(Int32)" offset="191" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="83"><method assemblyName="NatSet" name="remove" token="6000004"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            }
            else
            {]]></beforeSource>
<source><![CDATA[                if (!rest.Contains(k)) throw new ElementNotFoundException();]]></source>
<afterSource><![CDATA[
                rest.Remove(k);
            }]]></afterSource>
</frame>
<tag exceptionState="expected"><generatedTestRef idref="63c8bab8-86cb-45ce-8bf7-cb1b755aba49"/>
</tag>
</frameNode>
</frameException>
</frameTree>
