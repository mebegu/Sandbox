<documents created="2015-02-28 18:10:28Z"><document src="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics.Contracts;
using Microsoft.Pex.Framework.Validation;
using Microsoft.Pex.Framework;

namespace NatSet
{
    [PexClass]
    public partial class NatSet
    {
        private Boolean[] sm;
        private List<int> rest;
        private int max;
        public int length;

        [ContractInvariantMethod]
        private void invariant()
        {
            Contract.Invariant(this.sm != null);
            Contract.Invariant(Contract.ForAll(rest, x => x > 99));
            Contract.Invariant(isListSorted(rest));
            Contract.Invariant(this.max == findMax(sm, rest));
            Contract.Invariant(this.length >= 0);
        }


        public NatSet()
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
            length = 0;
        }

        public NatSet(int k)
        {
            sm = new Boolean[100];
            rest = new List<int>();
            max = -1;
            length = 0;
            insert(k);
        }

        [PexMethod]
        public void insert(int k)
        {
            Contract.Requires(k >= 0);

            if (k < 100)
            {
                sm[k] = true;
            }
            else
            {
                if (rest.Contains(k)) return;

                rest.Add(k);
                rest.Sort();
            }

            length++;
            if (k > max) max = k;

        }


        //Test if exception works correctly
        //Reset max
        [PexMethod]
        [PexAllowedException(typeof(ElementNotFoundException))]
        public void remove(int k)
        {
            Contract.Requires(k >= 0);
            Contract.Ensures(!sm[k] && !rest.Contains(k));

            if (k < 100)
            {
                if (sm[k]) throw new ElementNotFoundException();

                sm[k] = false;
            }
            else
            {
                if (!rest.Contains(k)) throw new ElementNotFoundException();

                rest.Remove(k);
            }

            length--;
            max = findMax(sm, rest);
        }

        public void union(NatSet other)
        {

        }

        public void intersect(NatSet other)
        {

        }
        
        [PexMethod]
        public int get(int index)
        ]]></source>
</chunk>
<chunk hits="0" offset="0031" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="get" namespace="NatSet" type="NatSet.NatSet" typeName="NatSet" token="6000019" module="NatSet.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="25" value="1"/>
<hit index="31" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="12" coveredRatio="0.25"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[Contract.Requires(index >= 0 && index < length);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="userortestcode"><source><![CDATA[int count = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            for (]]></source>
</chunk>
<chunk hits="0" offset="0034" domain="userortestcode"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="006e" domain="userortestcode"><source><![CDATA[i < sm.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="userortestcode"><source><![CDATA[if (sm[i])]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="userortestcode"><source><![CDATA[if (count == index)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[return i;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[count++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0068" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0069" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="0" offset="007d" domain="userortestcode"><source><![CDATA[index = index - count;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="userortestcode"><source><![CDATA[return rest.ElementAt(index);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        [Pure]
        [PexMethod]
        private Boolean isListSorted(List<int> lst)
        {
            Contract.Requires(lst != null);
            if (lst.Count() <= 1) return true;
            for (int i = 0; i < lst.Count() - 1; i++)
            {
                if (lst.ElementAt(i) > lst.ElementAt(i + 1)) return false;
            }

            return true;
        }

        [Pure]
        [PexMethod]
        private int findMax(bool[] array, List<int> lst)
        {
            Contract.Requires(array != null);
            Contract.Requires(lst != null);
            
            
            if (lst.Count != 0) return lst.ElementAt(lst.Count - 1);

            for (int i = array.Length - 1; i >= 0; i--)
            {
                if (array[i]) return i;
            }

            return -1;
        }
    }

    public class ElementNotFoundException : System.ApplicationException
    {
        public ElementNotFoundException() { }
        public ElementNotFoundException(string message) { }
        public ElementNotFoundException(string message, System.Exception inner) { }

        // Constructor needed for serialization 
        // when exception propagates from a remoting server to the client.
        protected ElementNotFoundException(System.Runtime.Serialization.SerializationInfo info,
            System.Runtime.Serialization.StreamingContext context) { }
    }
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of NatSet)" missing="true"><method name="Requires" type="System.Diagnostics.Contracts.__ContractsRuntime" token="600003d" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="ReportFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="600003a" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="TriggerFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="600003b" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException" token="6000044" module="NatSet.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
</document>
</documents>
