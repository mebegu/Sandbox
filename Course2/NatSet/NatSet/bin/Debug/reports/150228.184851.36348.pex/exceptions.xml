<frameTree version="0.94.51006.1"><frameException type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException"><tag exceptionState="unexpected"><generatedTestRef idref="8d3c155e-f0e2-4264-8698-e2db7db1430d"/>
</tag>
<frameNode><frame value="  at NatSet.findMax(Boolean[], List`1&lt;Int32&gt;) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(122)" method="NatSet.findMax(Boolean[], List`1&lt;Int32&gt;)" offset="0" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="122"><method assemblyName="NatSet" name="findMax" token="6000008"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="array" position="1"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="20000a0" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="lst" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        [PexMethod]
        private int findMax(bool[] array, List<int> lst)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(array != null);]]></source>
<afterSource><![CDATA[            Contract.Requires(lst != null);
            
            ]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="8d3c155e-f0e2-4264-8698-e2db7db1430d"/>
</tag>
</frameNode>
<frameNode><frame value="  at NatSet.findMax(Boolean[], List`1&lt;Int32&gt;) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(123)" method="NatSet.findMax(Boolean[], List`1&lt;Int32&gt;)" offset="19" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="123"><method assemblyName="NatSet" name="findMax" token="6000008"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="array" position="1"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="20000a0" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="lst" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="2000376" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        private int findMax(bool[] array, List<int> lst)
        {
            Contract.Requires(array != null);]]></beforeSource>
<source><![CDATA[            Contract.Requires(lst != null);]]></source>
<afterSource><![CDATA[            
            
            if (lst.Capacity != 0) return lst.ElementAt(lst.Capacity - 1);]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="6faa5f93-cb28-4ac0-8a72-2b39efc8f8e5"/>
</tag>
</frameNode>
<frameNode><frame value="  at NatSet.insert(Int32) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(46)" method="NatSet.insert(Int32)" offset="0" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="46"><method assemblyName="NatSet" name="insert" token="6000003"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void insert(int k)
        {
            ]]></beforeSource>
<source><![CDATA[            Contract.Requires(k >= 0);]]></source>
<afterSource><![CDATA[            PexAssume.InRange(k, 0, int.MaxValue);

]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="a5c04a0c-6e8c-414a-8fef-c27838150bf4"/>
</tag>
</frameNode>
</frameException>
<frameException type="NatSet.ElementNotFoundException"><tag exceptionState="expected"><generatedTestRef idref="28c50316-e6bc-4005-aeea-c444effb218e"/>
</tag>
<frameNode><frame value="  at NatSet.remove(Int32) in C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs(85)" method="NatSet.remove(Int32)" offset="191" file="C:\Users\MehmetBerk\Documents\GitHub\Sandbox\Course2\NatSet\NatSet\NatSet.cs" line="85"><method assemblyName="NatSet" name="remove" token="6000004"><declaringType assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="NatSet" name="NatSet" token="2000002" namespace="NatSet"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000f6" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            }
            else
            {]]></beforeSource>
<source><![CDATA[                if (!rest.Contains(k)) throw new ElementNotFoundException();]]></source>
<afterSource><![CDATA[
                rest.Remove(k);
            }]]></afterSource>
</frame>
<tag exceptionState="expected"><generatedTestRef idref="28c50316-e6bc-4005-aeea-c444effb218e"/>
</tag>
</frameNode>
</frameException>
</frameTree>
